#include <iostream>
#include <vector>
#include <queue>

using namespace std;

const int N = 1e5 + 10;
bool visarr[N];		// visited array
vector<int> adj[N]; // adjacency list rep

vector<int> dis_vec(N, -1);
/* deafult value of distance=-1
*/

//  using BFS
void bfs(int vertex)
{
	queue<int> q;
	q.push(vertex);
	visarr[vertex] = 1;
	dis_vec[vertex] = 0;

	while (!q.empty())
	{
		int crt_node = q.front();
		q.pop();
		// cout<<crt_node<<" ";
		for (int child : adj[vertex])
		{
			if (!visarr[child])
			{
				q.push(child);
				visarr[child] = true;
				dis_vec[child] = dis_vec[crt_node] + 1;
			}
		}
	}
}

int main(int argc, char const *argv[])
{
	int v, e;
	cin >> v >> e;
	for (int i = 0; i < e; i++)
	{
		int x, y;
		cin >> x >> y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}

	// taking root as 0
	bfs(0);

	for (int i = 0; i < v; i++)
	{
		// printing vertices and  distances 
		cout << "Node " << i << " has dis_vec " << dis_vec[i] << "\n";
	}
	return 0;
}
